[{"content":"不是直接在虚拟机里安装\u0026ldquo;Clash for linux\u0026rdquo;而是直接使用宿主机的clash代理，也就是只在Windows上打开代理。\nclash设置 需要允许局域网连接。 并获取代理端口号，这个在clash home目录的./profiles/xxx.yml配置文件（我的文件名是一串数字）里可以看到。 clash可以直接打开home/目录。 在配置文件中查看代理端口。 貌似不用开启虚拟机的回环代理，实测开不开都无所谓。 wsl设置 添加到~/目录下的.bashrc即可。\n1 2 3 4 5 # 设置clash代理 # 自动获取IP地址 host_ip=$(cat /etc/resolv.conf |grep \u0026#34;nameserver\u0026#34; |cut -d \u0026#34; \u0026#34; -f 2) # ALL_PROXY,应该是表示全局代理 export ALL_PROXY=\u0026#34;http://$host_ip:7890\u0026#34; 自动获取IP地址 cat /etc/resolv.conf |grep \u0026quot;nameserver\u0026quot; |cut -d \u0026quot; \u0026quot; -f 2 cut介绍 Usage: cut OPTION\u0026hellip; [FILE]\u0026hellip;\nUse one, and only one of -b, -c or -f. Each LIST is made up of one range, or many ranges separated by commas. Selected input is written in the same order that it is read, and is written exactly once.\ncut 命令从文件的每一行（因此输出出来可能会有很多行）剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。如果不指定 File 参数，cut 命令将读取标准输入。\u0026ldquo;菜鸟教程\u0026rdquo;\n因为grep可以定位到含有关键字的行，所以cut配置grep使用的话就能输出某一行的特定字符。\n参数 -d，自定义分隔符，默认为制表符。例如 -d \u0026quot; \u0026quot;就是用空格来做分隔符，cut会用分割符把内容分割成带序号的\u0026quot;区域\u0026quot;。\n-f，这个要和-d参数配合使用，指定显示某一个区域。分隔符是不会显示的。\n命令解析 首先，通过cat /etc/resolv.conf |grep \u0026quot;nameserver\u0026quot;命令可以获得， nameserver 172.19.176.1 因为我们只想要后面的IP，所以还需要再处理一下。我们发现该字符串刚好被一个空格\u0026quot; \u0026quot;分为了两部分，而后面一部分正是我们想要的。因此想到cut命令并指定空格\u0026quot; \u0026quot;为分隔符。 cut -d \u0026quot; \u0026quot; -f 2在cut中第二部分的序号就是2，因此用-f 2命令来指定显示第二部分。\n最后是变量 如果要用命令的输出（值）来作为bash的变量，则需要将命令写在$()内。并且bash变量的赋值，等号两边是不能有空格的。\n注意 ping命令不会使用代理，所以ping google.com此时也是ping不通的。可以使用curl命令来测试。\n","date":"2022-07-29T21:45:07+08:00","image":"https://bonbon369.github.io/p/wsl2-%E9%85%8D%E7%BD%AE-clash-%E4%BB%A3%E7%90%86/pic/clash_hubfbc9da19b3e57df992ce86f2926aa02_77094_120x120_fill_q75_box_smart1.jpg","permalink":"https://bonbon369.github.io/p/wsl2-%E9%85%8D%E7%BD%AE-clash-%E4%BB%A3%E7%90%86/","title":"Wsl2 配置 Clash 代理"},{"content":"在淘宝整了一块FPGA的板子，应该是很多年前的库存了（对于我一个初学者来说，香的很!），它使用的USB转串口芯片是PL-2303HXA，但是这个型号已经停产了，所以在Prolific官网下载的最新驱动是无法使用的（感觉是厂家故意的\u0026hellip;）。 因此需要找到旧版的驱动，但是又不能太旧，太旧的话对Windows10以上的系统支持不太好，因此需要找到一个合适的驱动。（你废话不要太多了😡！）\n下载地址 阿里云\n百度云\n卸载驱动 如果已经安装过驱动，安装该驱动前请先把原来的驱动删掉。具体方法如下，\n右击设备，点击\u0026quot;卸载设备\u0026quot;，在弹出的窗口中给\u0026quot;尝试删除此设备的驱动\u0026quot;打上勾。 安装驱动 直接双击运行。如果安装时可能还会弹出一个让你卸载驱动的窗口，按照他说的做就好了。卸载完重启一下，再重新安装。\n","date":"2022-07-17T14:20:26+08:00","permalink":"https://bonbon369.github.io/p/%E9%80%82%E7%94%A8%E4%BA%8E-windows-10/11-%E7%9A%84pl-2303hxa%E9%A9%B1%E5%8A%A8/","title":"适用于 Windows 10/11 的PL-2303HXA驱动"},{"content":"以nginx为例。\n下载并安装docker 官方文档，直接使用脚本安装，我选择的是Ubuntu的Docker Engine版本。 很简单我就不演示了。\n1 2 3 curl -fsSL https://get.docker.com -o get-docker.sh sudo bash get-docker.sh #就是把.sh文件下过来,再用bash打开 nginx 拉取镜像 nginx在docker上的页面。 sudo docker pull nginx:latest\n创建并启动容器 sudo docker run -d --name nginx -p 80:80 -p 443:443 nginx:latest\n命令解析 run：创建并运行一个容器 nginx:latest：最后的这一条就是指定用哪一个镜像来创建容器，这里指定的就是nginx。 -d：让容器在后台运行。 --name：给容器命名，因为一个镜像可以开多个容器。 -p：指定端口映射，主机端口：容器端口，例如80：88，把主机的80端口映射到docker的88端口。例如nginx会监听80端口，那我就可以指定-p 7474:80那么localhost:7474也会进入nginx的主页。-p可以指定多个端口映射。\ndocker的其他指令\n进入容器内部 docker exec -it nginx /bin/bash\nexec：在运行的容器中执行命令 -i：开启标准输入，STDIN -t：分配一个虚拟终端，TTY nginx：指定容器 /bin/bash：将这条命令放进容器里执行，就是打开bash\n这样就可以在容器的内部直接操作容器了。 宿主机与容器共享文件 先创建一个nginx容器，把里面的配置文件拷贝出来。 删除原来的nginx容器。 在主机上创建www/html目录，作为网站的根目录。 新建一个nginx容器，将之前复制出来的文件和www/html共享给nginx容器。 准备共享的文件 在主机上创建共享目录 我的习惯是跟据nginx原来的目录结果，建个差不多的。\n1 2 3 4 5 6 sudo mkdir -p /mnt/nginx/html/ # 网站根目录 sudo mkdir -p /mnt/nginx/logs/ # 保存日志文件 sudo mkdir -p /mnt/nginx/conf.d/ # 有一个配置文件会放在该目录下 拷贝配置文件 先将容器中的配置文件拷贝出来，将容器nginx内的nginx.conf和default.conf分别复制到/mnt/nginx和/mnt/nginx/conf.d/目录下。 /mnt目录是专门用来挂载的，那么将容器中的文件链接到主机，也能算挂载吧，所以放在这个目录下。\n1 2 3 4 5 6 sudo docker cp nginx:/etc/nginx/nginx.conf /mnt/nginx/ sudo docker cp nginx:/etc/nginx/conf.d/default.conf /mnt/nginx/conf.d/ #\tcp 命令如果目的地地址的末尾是个目录的话，文件会按原来的名字放进该目录。否则改成末尾的文件名。 #\t比如这里conf.d/是个目录，那就是将default.conf放进该目录下。 # 如果去掉/符号，也就是将conf.d当作一个文件名，那么default.conf会被改名成conf.d并放在nginx/目录下 cp：指定容器目录，[容器名或容器ID]:[容器内的目录或文件] cp命令可以在容器和主机之间双向拷贝。\n当前的目录结构\n1 2 3 4 5 6 7 8 $ tree . └── nginx ├── conf.d │ └── default.conf ├── html ├── logs └── nginx.conf 停止并移除该容器 1 2 sudo docker stop nginx sudo docker rm nginx 创建一个新的容器 查看刚刚复制出来的配置文件，查看需要映射的目录，也就是日志目录、服务器根目录以及配置文件。\n1 2 3 4 5 6 7 8 9 /var/log/nginx/ #nginx的日志目录 /etc/nginx/nginx.conf /etc/nginx/conf.d/default.conf #配置文件 /usr/share/nginx/html/ #服务器根目录 默认监听的是80端口，所以只要开一个80端口就行了。 1 2 3 4 5 6 7 8 9 sudo docker run \\ -d --name nginx \\ --restart=always \\ -p 80:80 \\ -v /mnt/nginx/nginx.conf:/etc/nginx/nginx.conf \\ -v /mnt/nginx/conf.d/:/etc/nginx/conf.d/ \\ -v /mnt/nginx/logs/:/var/log/nginx/ \\ -v /mnt/nginx/html/:/usr/share/nginx/html \\ --privileged nginx:latest -v：绑定一个卷volume，或者说主机共享目录或文件。[主机目录或文件]:[容器目录或文件] --restart：这个可以设置容器的启动模式，如果一个容器被设置成设置成always那么docker重启时，该容器也会被自动重启，总之就是保证容器一直都是开启的状态。因为服务器是要一直开着的，所以就设置为always。文档 --privileged：授予容器所有的权限，比如写入主机目录下的文件（共享的那几个目录）。 \\：可以给命令分行\n往/mnt/nginx/html里面写一个index.html，看看效果。\n","date":"2022-05-07T14:16:05+08:00","image":"https://bonbon369.github.io/p/docker/contributors_huced4e8fdb0b7f04dcb8a656434c9950d_402158_120x120_fill_box_smart1_3.png","permalink":"https://bonbon369.github.io/p/docker/","title":"Docker"},{"content":"Hello Word! 你好，世界！\n","date":"2022-05-07T13:33:47+08:00","image":"https://bonbon369.github.io/p/test-post/earth_hu7a3a731159d393c22e0d70def9714a23_244622_120x120_fill_q75_box_smart1.jpg","permalink":"https://bonbon369.github.io/p/test-post/","title":"Hello World!"}]